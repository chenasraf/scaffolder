{"version":3,"sources":["webpack/universalModuleDefinition","/Users/planck/Dev/simple-scaffold/cmd.ts","/Users/planck/Dev/simple-scaffold/scaffold.ts","external \"command-line-args\"","external \"command-line-usage\"","external \"fs\"","external \"glob\"","external \"handlebars\"","external \"path\"","webpack/bootstrap","webpack/startup"],"names":["root","factory","exports","module","define","amd","global","filePathParser","content","startsWith","process","cwd","join","path","sep","defs","name","alias","type","String","description","defaultOption","typeLabel","multiple","split","key","value","text","trim","length","includes","defaultValue","Boolean","args","cliArgs","camelCase","help","header","optionList","locals","reduce","all","cur","createSubFolder","console","log","cliUsage","exit","info","templates","output","createSubfolder","run","config","DefaultConfig","this","DefaultLocals","Name","toUpperCase","slice","toLowerCase","parseLocals","handlebars","compile","noEscape","template","e","warn","fileList","input","checkPath","files","glob","sync","dot","map","g","idx","indexOf","cleanCheckPath","file","push","base","getFileContents","filePath","fs","readFileSync","toString","getOutputPath","basePath","out","outputDir","relativeFilePath","writeFile","fileContents","baseDir","dirname","writeDirectory","encoding","err","fileConf","count","outputPath","contents","outputContents","lstatSync","isDirectory","replace","error","Error","parent","existsSync","mkdirSync","SimpleScaffold","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"cmd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(global, function() {\nreturn ","import SimpleScaffold from './scaffold'\nimport * as fs from 'fs'\nimport {IScaffold} from './index'\nimport * as cliArgs from 'command-line-args'\nimport * as cliUsage from 'command-line-usage'\nimport * as path from 'path'\n\ntype Def = cliArgs.OptionDefinition & { description?: string, typeLabel?: string }\n\nfunction localsParser(content: string) {\n  const [key, value] = content.split('=')\n  return { [key]: value }\n}\n\nfunction filePathParser(content: string) {\n  if (content.startsWith('/')) {\n    return content\n  }\n  return [process.cwd(), content].join(path.sep)\n}\n\nfunction booleanParser(text: string) {\n  return text && text.trim().length ? ['true', '1', 'on'].includes(text.trim()) : true\n}\n\nconst defs: Def[] = [\n  {\n    name: 'name',\n    alias: 'n',\n    type: String,\n    description: 'Component output name',\n    defaultOption: true,\n  },\n  {\n    name: 'templates',\n    alias: 't',\n    type: filePathParser,\n    typeLabel: '{underline File}[]',\n    description: `A glob pattern of template files to load.\\nA template file may be of any type and extension, and supports Handlebars as a parsing engine for the file names and contents, so you may customize both with variables from your configuration.`,\n    multiple: true,\n  },\n  {\n    name: 'output',\n    alias: 'o',\n    type: filePathParser,\n    typeLabel: '{underline File}',\n    description: `The output directory to put the new files in. They will attempt to maintain their regular structure as they are found, if possible.`,\n  },\n  {\n    name: 'locals',\n    alias: 'l',\n    description: `A key-value map for the template to use in parsing.`,\n    multiple: true,\n    typeLabel: '{underline Key=Value}',\n    type: localsParser,\n  },\n  {\n    name: 'create-sub-folder',\n    alias: 'S',\n    typeLabel: '{underline Boolean}',\n    description: 'Whether to create a subdirectory with \\\\{\\\\{Name\\\\}\\\\} in the {underline output} directory. {bold default=true}',\n    type: booleanParser,\n    defaultValue: true,\n  },\n  {\n    name: 'help',\n    alias: 'h',\n    type: Boolean,\n    description: 'Display this help message',\n  },\n]\n\nconst args = cliArgs(defs, { camelCase: true })\n\nconst help = [\n  { header: 'Scaffold Generator', content: `Generate scaffolds for your project based on file templates.\\nUsage: {bold simple-scaffold} {underline scaffold-name} {underline [options]}` },\n  { header: 'Options', optionList: defs }\n]\n\nargs.locals = (args.locals || []).reduce((all: object, cur: object) => ({ ...all, ...cur }), {} as IScaffold.Config['locals'])\nif (args.createSubFolder === null) {\n  args.createSubFolder = true\n}\n\nif (args.help || !args.name) {\n  console.log(cliUsage(help))\n  process.exit(0)\n}\n\nconsole.info('Config:', args)\nnew SimpleScaffold({\n  name: args.name,\n  templates: args.templates,\n  output: args.output,\n  locals: args.locals,\n  createSubfolder: args.createSubFolder,\n}).run()\n","import * as fs from \"fs\"\nimport * as path from \"path\"\nimport { IScaffold } from \"./index.d\"\nimport * as glob from \"glob\"\nimport * as handlebars from \"handlebars\"\n\nclass SimpleScaffold {\n  public config: IScaffold.Config\n  public locals: IScaffold.Config[\"locals\"] = {} as any\n\n  constructor(config: IScaffold.Config) {\n    const DefaultConfig: IScaffold.Config = {\n      name: \"scaffold\",\n      templates: [],\n      output: process.cwd(),\n      createSubfolder: true,\n    }\n\n    this.config = { ...DefaultConfig, ...config }\n\n    const DefaultLocals = {\n      Name: this.config.name![0].toUpperCase() + this.config.name!.slice(1),\n      name: this.config.name![0].toLowerCase() + this.config.name!.slice(1),\n    }\n\n    this.locals = { ...DefaultLocals, ...config.locals }\n  }\n\n  private parseLocals(text: string): string {\n    try {\n      const template = handlebars.compile(text, {\n        noEscape: true,\n      })\n      return template(this.locals)\n    } catch (e) {\n      console.warn(\"Problem using Handlebars, returning unmodified content\")\n      return text\n    }\n  }\n\n  private fileList(input: string[]): IScaffold.FileRepr[] {\n    const output: IScaffold.FileRepr[] = []\n    for (const checkPath of input) {\n      const files = glob\n        .sync(checkPath, { dot: true })\n        .map((g) => (g[0] == \"/\" ? g : path.join(process.cwd(), g)))\n      const idx = checkPath.indexOf(\"*\")\n      let cleanCheckPath = checkPath\n      if (idx >= 0) {\n        cleanCheckPath = checkPath.slice(0, idx - 1)\n      }\n      for (const file of files) {\n        output.push({ base: cleanCheckPath, file })\n      }\n    }\n    return output\n  }\n\n  private getFileContents(filePath: string): string {\n    console.log(fs.readFileSync(filePath))\n    return fs.readFileSync(filePath).toString()\n  }\n\n  private getOutputPath(file: string, basePath: string): string {\n    let out: string\n\n    if (typeof this.config.output === \"function\") {\n      out = this.config.output(file, basePath)\n    } else {\n      const outputDir =\n        this.config.output +\n        (this.config.createSubfolder ? `/${this.config.name}/` : \"/\")\n      const idx = file.indexOf(basePath)\n      let relativeFilePath = file\n      if (idx >= 0) {\n        relativeFilePath = file.slice(idx + basePath.length + 1)\n      }\n      out = outputDir + relativeFilePath\n    }\n\n    return this.parseLocals(out)\n  }\n\n  private writeFile(filePath: string, fileContents: string): void {\n    const baseDir = path.dirname(filePath)\n    this.writeDirectory(baseDir, filePath)\n    console.info(\"Writing file:\", filePath)\n    fs.writeFile(filePath, fileContents, { encoding: \"utf-8\" }, (err) => {\n      if (err) {\n        throw err\n      }\n    })\n  }\n\n  public run(): void {\n    console.log(`Generating scaffold: ${this.config.name}...`)\n    const templates = this.fileList(this.config.templates)\n\n    let fileConf,\n      count = 0\n\n    console.log(\"Template files:\", templates)\n    for (fileConf of templates) {\n      let outputPath, contents, outputContents, file, base\n      try {\n        count++\n        file = fileConf.file\n        base = fileConf.base\n        outputPath = this.getOutputPath(file, base)\n        if (fs.lstatSync(file).isDirectory()) {\n          this.writeDirectory(outputPath, file)\n          continue\n        }\n        contents = this.getFileContents(file)\n        outputContents = this.parseLocals(contents)\n\n        console.info(\"Writing:\", {\n          file,\n          base,\n          outputPath,\n          outputContents: outputContents.replace(\"\\n\", \"\\\\n\"),\n        })\n        this.writeFile(outputPath, outputContents)\n      } catch (e) {\n        console.error(\"Error while processing file:\", {\n          file,\n          base,\n          contents,\n          outputPath,\n          outputContents,\n        })\n        throw e\n      }\n    }\n\n    if (!count) {\n      throw new Error(\"No files to scaffold!\")\n    }\n\n    console.log(\"Done\")\n  }\n\n  private writeDirectory(outputPath: string, file: any): void {\n    const parent = path.dirname(outputPath)\n    if (!fs.existsSync(parent)) {\n      this.writeDirectory(parent, outputPath)\n    }\n    if (!fs.existsSync(outputPath)) {\n      console.info(\"Creating directory:\", {\n        file,\n        outputPath,\n      })\n      fs.mkdirSync(outputPath)\n    }\n  }\n}\n\nexport default SimpleScaffold\n","module.exports = require(\"command-line-args\");;","module.exports = require(\"command-line-usage\");;","module.exports = require(\"fs\");;","module.exports = require(\"glob\");;","module.exports = require(\"handlebars\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(784);\n"],"sourceRoot":""}